# Workflow.mdc - Development Workflow Rules

## Development Agent Workflow
You are a development agent implementing a project. Follow established documentation and maintain consistency with configuration-driven architecture.

## Core Workflow Process

### Before Starting Any Task
- Consult `/Docs/Implementation.md` for current stage and available tasks
- Check `/Docs/Maintainability_Architecture_PRD.md` for configuration patterns
- Review `/Docs/Configuration_Standards.md` for configuration requirements
- Check task dependencies and prerequisites
- Verify scope understanding

### Task Execution Protocol

#### 1. Task Assessment
- Read subtask from `/Docs/Implementation.md`
- Assess subtask complexity:
  - **Simple subtask:** Implement directly
  - **Complex subtask:** Create a todo list

#### 2. Documentation Research
- Check `/Docs/Implementation.md` for relevant documentation links
- Read and understand documentation before implementing

#### 3. Configuration-First Development
- Check if component/page exists in configuration library
- Use existing configurations before creating new ones
- All new components must have configuration files
- No hardcoded values - use configuration references
- Follow `/Docs/Configuration_Standards.md` patterns

#### 4. UI/UX Implementation
- Consult `/Docs/UI_UX_doc.md` before implementing any UI/UX elements
- Check `/Docs/Nordic_Design_System_Implementation.md` for Nordic design specifications
- Use theme configuration for all styling (no hardcoded colors/sizes)
- Apply design tokens from theme configuration
- Implement components using configuration schemas
- Ensure all text uses content configuration (no hardcoded strings)
- Follow responsive configuration patterns

#### 5. Project Structure Compliance
- Check `/Docs/project_structure.md` before:
  - Running commands
  - Creating files/folders
  - Making structural changes
  - Adding dependencies

#### 6. Error Handling
- Check `/Docs/Bug_tracking.md` for similar issues before fixing
- Document all errors and solutions in Bug_tracking.md
- Include error details, root cause, and resolution steps

#### 7. Task Completion
Mark tasks complete only when:
- All functionality implemented correctly
- Configuration files created/updated
- No hardcoded values remain
- Code follows project structure guidelines
- UI/UX matches specifications (if applicable)
- All text uses content configuration
- Theme tokens used for styling
- No errors or warnings remain
- All task list items completed (if applicable)

### File Reference Priority
1. `/Docs/Maintainability_Architecture_PRD.md` - Configuration architecture
2. `/Docs/Configuration_Standards.md` - Configuration patterns and examples
3. `/Docs/Bug_tracking.md` - Check for known issues
4. `/Docs/Implementation.md` - Main task reference
5. `/Docs/project_structure.md` - Structure guidance
6. `/Docs/UI_UX_doc.md` - Design requirements
7. `/Docs/Nordic_Design_System_Implementation.md` - Nordic design specifications
8. `/Docs/Customer_Dashboard_Implementation.md` - Customer portal guidelines
9. `/Docs/Chatwoot_Messaging_Implementation.md` - Chat system implementation
10. `/Docs/Admin_Dashboard_Enhancement.md` - Admin interface specifications
11. `/Docs/Customer_Portal_Architecture.md` - Portal architecture guidelines
12. `/Docs/API_Integration_Documentation.md` - API development standards

## Critical Rules
- **NEVER** skip documentation consultation
- **NEVER** hardcode values that should be configured
- **NEVER** use inline styles or colors - use theme tokens
- **NEVER** hardcode text - use content configuration
- **NEVER** create components without configuration files
- **NEVER** mark tasks complete without proper testing
- **NEVER** ignore project structure guidelines
- **NEVER** implement UI without checking UI_UX_doc.md and Nordic_Design_System_Implementation.md
- **NEVER** fix errors without checking Bug_tracking.md first
- **NEVER** implement chat features without consulting Chatwoot_Messaging_Implementation.md
- **NEVER** build customer features without checking Customer_Dashboard_Implementation.md
- **NEVER** create APIs without following API_Integration_Documentation.md standards
- **ALWAYS** check Configuration_Standards.md before creating new components
- **ALWAYS** use configuration references instead of hardcoded values
- **ALWAYS** create configuration schemas for new components
- **ALWAYS** document errors and solutions
- **ALWAYS** follow the established workflow process
- **ALWAYS** apply Nordic design principles through configuration
- **ALWAYS** implement proper authentication and security measures
- **ALWAYS** ensure real-time features work with WebSocket integration
- **ALWAYS** test chat functionality with Chatwoot integration
- **ALWAYS** validate API endpoints with proper error handling