import React, { useState, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { DeviceModel } from '@/lib/services/types';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { StripePaymentForm } from '@/components/booking/StripePaymentForm';
import { PayPalPaymentForm } from '@/components/booking/PayPalPaymentForm';

interface RepairEstimate {
  repair: {
    id: string;
    name: string;
    description: string;
    category: string;
  };
  estimate: {
    total: number;
    basePrice: number;
    breakdown: any;
    warranty: number;
    validUntil: string;
    disclaimers: string[];
  };
}

interface CustomerInfo {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address: {
    street: string;
    city: string;
    postcode: string;
    country: string;
  };
  preferredContact: 'email' | 'phone' | 'sms';
  marketingConsent: boolean;
}

export interface PaymentStepProps {
  device: DeviceModel;
  repairEstimates: RepairEstimate[];
  customerInfo: CustomerInfo;
  onPaymentSuccess: (paymentResult: any) => void;
  onPaymentError: (error: string) => void;
  onSkipPayment: (bookingData: any) => void;
  onBack: () => void;
  className?: string;
}

type PaymentMethod = 'stripe' | 'paypal';

export const PaymentStep: React.FC<PaymentStepProps> = ({
  device,
  repairEstimates,
  customerInfo,
  onPaymentSuccess,
  onPaymentError,
  onSkipPayment,
  onBack,
  className,
}) => {
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod>('stripe');
  const [isProcessing, setIsProcessing] = useState(false);
  const [bookingId, setBookingId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Calculate totals
  const totals = React.useMemo(() => {
    const subtotal = repairEstimates.reduce((sum, est) => sum + est.estimate.total, 0);
    const tax = Math.round(subtotal * 0.2); // 20% VAT
    const total = subtotal + tax;
    
    return {
      subtotal,
      tax,
      total,
      currency: 'GBP',
    };
  }, [repairEstimates]);

  // Create booking when component mounts
  useEffect(() => {
    const createBooking = async () => {
      try {
        setIsProcessing(true);
        setError(null);

        const bookingData = {
          deviceModelId: device.id,
          customerInfo,
          repairs: repairEstimates.map(est => ({
            repairType: est.repair.id,
            price: est.estimate.total,
            estimatedTime: est.estimate.warranty, // placeholder
          })),
          totalAmount: totals.total,
          currency: totals.currency,
          status: 'CONFIRMED',
        };

        const response = await fetch('/api/bookings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(bookingData),
        });

        const data = await response.json();

        if (response.ok) {
          setBookingId(data.booking.id);
        } else {
          setError(data.error || 'Failed to create booking');
        }
      } catch (error) {
        console.error('Error creating booking:', error);
        setError('Failed to create booking');
      } finally {
        setIsProcessing(false);
      }
    };

    createBooking();
  }, [device.id, customerInfo, repairEstimates, totals]);

  const handlePaymentSuccess = async (paymentResult: any) => {
    try {
      setIsProcessing(true);

      // Create customer account if they don't exist
      let userId = null;
      try {
        const registrationResponse = await fetch('/api/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: customerInfo.email,
            firstName: customerInfo.firstName,
            lastName: customerInfo.lastName,
            phone: customerInfo.phone,
            role: 'CUSTOMER',
            autoGenerated: true,
          }),
        });

        const registrationData = await registrationResponse.json();
        
        if (registrationData.success) {
          userId = registrationData.user.id;
          console.log('Customer account created:', registrationData.user);
          
          if (registrationData.user.temporaryPassword) {
            console.log('Temporary password for customer:', registrationData.user.temporaryPassword);
            // TODO: Send welcome email with temporary password
          }
        } else if (registrationData.existing) {
          userId = registrationData.userId;
          console.log('Using existing customer account:', userId);
        } else {
          console.warn('Failed to create customer account:', registrationData.error);
        }
      } catch (accountError) {
        console.warn('Error creating customer account:', accountError);
      }

      // Update booking status
      if (bookingId) {
        const updateResponse = await fetch(`/api/bookings/${bookingId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'CONFIRMED',
            paymentId: paymentResult.id,
            paymentStatus: 'COMPLETED',
            userId: userId, // Link booking to customer account
          }),
        });

        if (updateResponse.ok) {
          // Log email automation (simulated - ready for SMTP integration)
          try {
            console.log('=== EMAIL AUTOMATION TRIGGERED ===');
            console.log('Booking Confirmation Email:', {
              to: customerInfo.email,
              subject: `Booking Confirmation - ${device.brand} ${device.name}`,
              template: 'booking-confirmation',
              bookingId,
              deviceName: `${device.brand} ${device.name}`,
              totalAmount: totals.total,
              customerName: `${customerInfo.firstName} ${customerInfo.lastName}`,
            });
            
            console.log('Payment Confirmation Email:', {
              to: customerInfo.email,
              subject: `Payment Confirmation - Â£${totals.total}`,
              template: 'payment-confirmation',
              bookingId,
              paymentId: paymentResult.id,
              amount: totals.total,
              customerName: `${customerInfo.firstName} ${customerInfo.lastName}`,
            });
            console.log('=== EMAIL AUTOMATION COMPLETE ===');
            
            // TODO: When SMTP is configured, replace with actual email sending:
            /*
            const emailResponse = await fetch('/api/email/send', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                to: customerInfo.email,
                subject: `Booking Confirmation - ${device.brand} ${device.name}`,
                template: 'booking-confirmation',
                data: { ... }
              }),
            });
            */
            
          } catch (emailError) {
            console.warn('Email automation error:', emailError);
          }

          onPaymentSuccess({
            ...paymentResult,
            bookingId,
            totalAmount: totals.total,
          });
        } else {
          onPaymentError('Payment successful but booking update failed');
        }
      } else {
        onPaymentError('No booking ID available');
      }
    } catch (error) {
      console.error('Error updating booking:', error);
      onPaymentError('Payment successful but booking update failed');
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePaymentError = (error: string) => {
    setError(error);
    onPaymentError(error);
  };

  const handleSkipPayment = async () => {
    try {
      setIsProcessing(true);

      // Create customer account if they don't exist
      let userId = null;
      try {
        const registrationResponse = await fetch('/api/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: customerInfo.email,
            firstName: customerInfo.firstName,
            lastName: customerInfo.lastName,
            phone: customerInfo.phone,
            role: 'CUSTOMER',
            autoGenerated: true,
          }),
        });

        const registrationData = await registrationResponse.json();
        
        if (registrationData.success) {
          userId = registrationData.user.id;
          console.log('Customer account created:', registrationData.user);
        } else if (registrationData.existing) {
          userId = registrationData.userId;
          console.log('Using existing customer account:', userId);
        }
      } catch (accountError) {
        console.warn('Error creating customer account:', accountError);
      }

      // Update booking with customer account link
      if (bookingId) {
        const updateResponse = await fetch(`/api/bookings/${bookingId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'CONFIRMED',
            paymentStatus: 'PENDING',
            userId: userId,
          }),
        });

        if (updateResponse.ok) {
          // Send confirmation email without payment details
          try {
            await fetch('/api/email/booking-confirmation', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                to: customerInfo.email,
                customerName: `${customerInfo.firstName} ${customerInfo.lastName}`,
                bookingReference: bookingId,
                device: {
                  brand: device.brand,
                  model: device.name,
                  issues: repairEstimates.map(est => est.repair.name)
                },
                service: {
                  type: repairEstimates.map(est => est.repair.name).join(', '),
                  urgency: 'Standard',
                  estimatedCost: totals.total,
                  estimatedDays: 3
                },
                nextSteps: [
                  'We will contact you within 2 hours to confirm your appointment',
                  'Bring your device to our Shoreditch location at 123 Tech Street',
                  'Our certified technician will perform a free 15-minute diagnostic',
                  'You will receive a detailed quote before any work begins',
                  'Payment is due when you collect your repaired device'
                ]
              }),
            });
          } catch (emailError) {
            console.warn('Email sending error:', emailError);
          }

          onSkipPayment({
            bookingId,
            totalAmount: totals.total,
            customerInfo,
            device,
            repairEstimates,
            paymentRequired: false,
          });
        } else {
          setError('Failed to confirm booking');
        }
      } else {
        setError('No booking ID available');
      }
    } catch (error) {
      console.error('Error confirming booking:', error);
      setError('Failed to confirm booking');
    } finally {
      setIsProcessing(false);
    }
  };

  if (isProcessing && !bookingId) {
    return (
      <div className={cn('space-y-6', className)}>
        <div className="text-center py-8">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <p className="mt-2 text-muted-foreground">Preparing your booking...</p>
        </div>
      </div>
    );
  }

  if (error && !bookingId) {
    return (
      <div className={cn('space-y-6', className)}>
        <Card className="p-6 bg-destructive/10 border-destructive/20">
          <div className="text-center">
            <div className="text-4xl mb-4">â ï¸</div>
            <h3 className="text-lg font-semibold mb-2">Booking Error</h3>
            <p className="text-destructive mb-4">{error}</p>
            <Button variant="outline" onClick={onBack}>
              Go Back
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className={cn('space-y-6 max-w-2xl mx-auto', className)}>
      {/* Header */}
      <div className="text-center">
        <h2 className="text-2xl font-bold mb-2">Payment Options</h2>
        <p className="text-muted-foreground">
          Choose to pay now or when you collect your device
        </p>
      </div>

      {/* Order Summary */}
      <Card className="p-6">
        <h3 className="font-semibold mb-4">Order Summary</h3>
        
        <div className="space-y-3">
          {/* Device */}
          <div className="flex justify-between items-center pb-2 border-b">
            <div>
              <div className="font-medium">{device.brand} {device.name}</div>
              <div className="text-sm text-muted-foreground">Year: {device.year}</div>
            </div>
          </div>

          {/* Repairs */}
          {repairEstimates.map((estimate, index) => (
            <div key={index} className="flex justify-between items-center">
              <div>
                <div className="font-medium">{estimate.repair.name}</div>
                <div className="text-sm text-muted-foreground">
                  {estimate.repair.description}
                </div>
              </div>
              <div className="text-right">
                <div className="font-medium">Â£{estimate.estimate.total}</div>
              </div>
            </div>
          ))}

          {/* Totals */}
          <div className="border-t pt-3 space-y-2">
            <div className="flex justify-between">
              <span>Subtotal</span>
              <span>Â£{totals.subtotal}</span>
            </div>
            <div className="flex justify-between">
              <span>VAT (20%)</span>
              <span>Â£{totals.tax}</span>
            </div>
            <div className="flex justify-between font-semibold text-lg border-t pt-2">
              <span>Total</span>
              <span>Â£{totals.total}</span>
            </div>
          </div>

          {/* Customer Info */}
          <div className="border-t pt-3">
            <div className="text-sm text-muted-foreground">
              <div><strong>Customer:</strong> {customerInfo.firstName} {customerInfo.lastName}</div>
              <div><strong>Email:</strong> {customerInfo.email}</div>
              <div><strong>Phone:</strong> {customerInfo.phone}</div>
            </div>
          </div>
        </div>
      </Card>

      {/* Payment Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card className="p-6 border-2 border-primary bg-primary/5">
          <div className="text-center">
            <div className="text-4xl mb-3">ð³</div>
            <h3 className="font-semibold mb-2">Pay Now</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Secure your booking with immediate payment. Get priority service and faster processing.
            </p>
            <ul className="text-xs text-left space-y-1 mb-4">
              <li>â Guaranteed booking slot</li>
              <li>â Priority service</li>
              <li>â No need to pay on collection</li>
            </ul>
          </div>
        </Card>

        <Card className="p-6 cursor-pointer hover:border-primary/50 transition-colors" onClick={handleSkipPayment}>
          <div className="text-center">
            <div className="text-4xl mb-3">ðª</div>
            <h3 className="font-semibold mb-2">Pay on Collection</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Confirm your booking now and pay when you collect your repaired device.
            </p>
            <ul className="text-xs text-left space-y-1 mb-4">
              <li>â No upfront payment required</li>
              <li>â Pay after work completion</li>
              <li>â Inspect device before payment</li>
            </ul>
            <Button 
              variant="outline" 
              className="w-full"
              disabled={isProcessing}
            >
              {isProcessing ? 'Confirming...' : 'Confirm Booking'}
            </Button>
          </div>
        </Card>
      </div>

      {/* Payment Method Selection */}
      <Card className="p-6">
        <h3 className="font-semibold mb-4">Pay Now - Payment Method</h3>
        
        <div className="grid grid-cols-2 gap-4 mb-4">
          <Button
            variant={selectedPaymentMethod === 'stripe' ? 'primary' : 'outline'}
            onClick={() => setSelectedPaymentMethod('stripe')}
            className="h-16 flex flex-col items-center justify-center"
          >
            <div className="text-lg mb-1">ð³</div>
            <div className="text-sm">Card Payment</div>
          </Button>
          
          <Button
            variant={selectedPaymentMethod === 'paypal' ? 'primary' : 'outline'}
            onClick={() => setSelectedPaymentMethod('paypal')}
            className="h-16 flex flex-col items-center justify-center"
          >
            <div className="text-lg mb-1">ð¿ï¸</div>
            <div className="text-sm">PayPal</div>
          </Button>
        </div>

        {/* Payment Form */}
        {bookingId && (
          <div className="border-t pt-4">
            {selectedPaymentMethod === 'stripe' ? (
              <StripePaymentForm
                bookingId={bookingId}
                amount={totals.total * 100} // Stripe expects amount in pence
                currency={totals.currency.toLowerCase()}
                customerId={customerInfo.email}
                onPaymentSuccess={handlePaymentSuccess}
                onPaymentError={handlePaymentError}
                savePaymentMethod={false}
              />
            ) : (
              <PayPalPaymentForm
                bookingId={bookingId}
                amount={totals.total}
                currency={totals.currency}
                onPaymentSuccess={handlePaymentSuccess}
                onPaymentError={handlePaymentError}
              />
            )}
          </div>
        )}
      </Card>

      {/* Error Display */}
      {error && (
        <Card className="p-4 bg-destructive/10 border-destructive/20">
          <p className="text-destructive text-center">{error}</p>
        </Card>
      )}

      {/* Security Notice */}
      <Card className="p-4 bg-muted/50">
        <div className="text-center text-sm text-muted-foreground">
          <div className="flex items-center justify-center space-x-2 mb-2">
            <span>ð</span>
            <span className="font-medium">Secure Payment</span>
          </div>
          <p>
            Your payment information is encrypted and secure. We use industry-standard 
            security measures to protect your data.
          </p>
        </div>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between items-center">
        <Button
          variant="outline"
          onClick={onBack}
          disabled={isProcessing}
        >
          â Back to Review
        </Button>
        
        <div className="text-center">
          <div className="text-xs text-muted-foreground">Booking ID</div>
          <div className="font-mono text-sm">{bookingId || 'Generating...'}</div>
        </div>

        <div className="text-sm text-muted-foreground">
          Both options confirm your booking
        </div>
      </div>
    </div>
  );
};

export default PaymentStep;