# RevivaTech Base Docker Compose Configuration
# üèóÔ∏è Base services - extended by docker-compose.override.yml (dev) or docker-compose.prod.yml (production)
# 
# Usage:
#   Development: docker-compose up -d (uses override.yml automatically)
#   Production:  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # RevivaTech Frontend
  revivatech_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: revivatech_frontend
    restart: unless-stopped
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # Base API configuration - overridden by env files
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3011}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3010}
      - NEXT_PUBLIC_DOMAIN=${NEXT_PUBLIC_DOMAIN:-localhost}
    networks:
      - revivatech_network
    depends_on:
      - revivatech_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RevivaTech Backend API
  revivatech_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: revivatech_backend
    restart: unless-stopped
    ports:
      - "3011:3011"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3011
      # Database configuration
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${POSTGRES_HOST:-revivatech_database}
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-revivatech}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB:-revivatech}
      # Redis configuration
      - REDIS_URL=redis://revivatech_redis:6379
      - REDIS_HOST=revivatech_redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL:-http://localhost:3011/api/auth}
      - BETTER_AUTH_BASE_URL=${BETTER_AUTH_BASE_URL:-http://localhost:3011/api/auth}
      # Google OAuth
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    networks:
      - revivatech_network
    depends_on:
      - revivatech_database
      - revivatech_redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  revivatech_database:
    image: postgres:15
    container_name: revivatech_database
    restart: unless-stopped
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-revivatech}
      - POSTGRES_USER=${POSTGRES_USER:-revivatech}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD:-trust}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - revivatech_db_data:/var/lib/postgresql/data/pgdata
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/001-schema.sql
      - ./backend/database/002_seed_data.sql:/docker-entrypoint-initdb.d/002-seed.sql
    networks:
      - revivatech_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-revivatech} -d ${POSTGRES_DB:-revivatech}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  revivatech_redis:
    image: redis:7-alpine
    container_name: revivatech_redis
    restart: unless-stopped
    ports:
      - "6383:6379"
    volumes:
      - revivatech_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - revivatech_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  revivatech_db_data:
    name: revivatech_db_data
  revivatech_redis_data:
    name: revivatech_redis_data

networks:
  revivatech_network:
    driver: bridge
    name: revivatech_network