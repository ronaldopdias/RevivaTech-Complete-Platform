version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: revivatech-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: revivatech
      POSTGRES_USER: revivatech
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - revivatech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revivatech"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: revivatech-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - revivatech-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: revivatech-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://revivatech:${POSTGRES_PASSWORD:-changeme}@postgres:5432/revivatech
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - revivatech-network
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend English
  frontend-en:
    build:
      context: ../frontend-en
      dockerfile: Dockerfile
      target: production
    container_name: revivatech-frontend-en
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - revivatech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Portuguese
  frontend-pt:
    build:
      context: ../frontend-pt
      dockerfile: Dockerfile
      target: production
    container_name: revivatech-frontend-pt
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      - backend
    networks:
      - revivatech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: revivatech-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend-en
      - frontend-pt
      - backend
    networks:
      - revivatech-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: revivatech-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - revivatech-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: revivatech-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-changeme}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - revivatech-network
    depends_on:
      - prometheus

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: revivatech-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - revivatech-network

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: revivatech-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - backend_logs:/app/logs/backend:ro
      - nginx_logs:/app/logs/nginx:ro
    networks:
      - revivatech-network
    depends_on:
      - loki

  # Database Backup
  postgres-backup:
    image: postgres:15-alpine
    container_name: revivatech-backup
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - revivatech-network
    depends_on:
      - postgres
    command: /backup.sh
    profiles:
      - backup

  # Development Tools (only for development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: revivatech-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - revivatech-network
    profiles:
      - development

  # Admin Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: revivatech-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@revivatech.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-changeme}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - revivatech-network
    depends_on:
      - postgres
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  revivatech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16