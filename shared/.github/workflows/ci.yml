name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: revivatech_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          npm ci --include=dev
          cd website/frontend-en && npm ci --include=dev
          cd ../frontend-pt && npm ci --include=dev
          cd ../backend && npm ci --include=dev
          cd ../shared && npm ci --include=dev
      
      - name: Setup test environment
        run: |
          cp website/shared/.env.example website/shared/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/revivatech_test" >> website/shared/.env.test
          echo "REDIS_URL=redis://localhost:6379" >> website/shared/.env.test
          echo "NODE_ENV=test" >> website/shared/.env.test
      
      - name: Run database migrations
        run: |
          cd website/backend
          npm run db:migrate:test
      
      - name: Run linting
        run: |
          cd website/shared && npm run lint
          cd ../frontend-en && npm run lint
          cd ../frontend-pt && npm run lint
          cd ../backend && npm run lint
      
      - name: Type checking
        run: |
          cd website/shared && npm run type-check
          cd ../frontend-en && npm run type-check
          cd ../frontend-pt && npm run type-check
          cd ../backend && npm run type-check
      
      - name: Run unit tests
        run: |
          cd website/shared && npm run test:unit
          cd ../frontend-en && npm run test:unit
          cd ../frontend-pt && npm run test:unit
          cd ../backend && npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/revivatech_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run integration tests
        run: |
          cd website/shared && npm run test:integration
          cd ../backend && npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/revivatech_test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./website/shared/coverage/lcov.info,./website/backend/coverage/lcov.info
          flags: unit-tests
          name: Unit Test Coverage
          fail_ci_if_error: true

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: revivatech_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd website/shared && npm ci
          cd ../frontend-en && npm ci
          cd ../backend && npm ci
      
      - name: Setup test environment
        run: |
          cp website/shared/.env.example website/shared/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/revivatech_test" >> website/shared/.env.test
          echo "REDIS_URL=redis://localhost:6379" >> website/shared/.env.test
          echo "NODE_ENV=test" >> website/shared/.env.test
      
      - name: Build applications
        run: |
          cd website/backend && npm run build
          cd ../frontend-en && npm run build
      
      - name: Start applications
        run: |
          cd website/backend && npm start &
          cd ../frontend-en && npm start &
          sleep 30 # Wait for applications to start
      
      - name: Run E2E tests
        run: |
          cd website/shared && npm run test:e2e
        env:
          CYPRESS_baseUrl: http://localhost:3000
          CYPRESS_apiUrl: http://localhost:3001
      
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: website/shared/cypress/screenshots
      
      - name: Upload E2E videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: website/shared/cypress/videos

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd website/shared && npm audit --audit-level=moderate
          cd ../frontend-en && npm audit --audit-level=moderate
          cd ../frontend-pt && npm audit --audit-level=moderate
          cd ../backend && npm audit --audit-level=moderate
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,typescript

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: |
          npm ci
          cd website/shared && npm ci
          cd ../frontend-en && npm ci
      
      - name: Build application
        run: |
          cd website/frontend-en && npm run build
      
      - name: Run Lighthouse CI
        run: |
          cd website/shared
          npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Run load tests
        run: |
          cd website/shared
          npm run test:load
        env:
          BASE_URL: http://localhost:3000

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [frontend-en, frontend-pt, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: website/${{ matrix.service }}
          file: website/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-test]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name revivatech-staging --region eu-west-2
      
      - name: Deploy to staging
        run: |
          cd deployment/k8s/staging
          
          # Update image tags
          export IMAGE_TAG=${{ github.sha }}
          envsubst < frontend-en-deployment.yaml | kubectl apply -f -
          envsubst < frontend-pt-deployment.yaml | kubectl apply -f -
          envsubst < backend-deployment.yaml | kubectl apply -f -
          
          # Apply other resources
          kubectl apply -f configmap.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f services.yaml
          kubectl apply -f ingress.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend-en -n staging --timeout=300s
          kubectl rollout status deployment/frontend-pt -n staging --timeout=300s
          kubectl rollout status deployment/backend -n staging --timeout=300s
      
      - name: Run smoke tests
        run: |
          cd website/shared
          npm run test:smoke
        env:
          BASE_URL: https://staging.revivatech.com
          API_URL: https://api-staging.revivatech.com
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Staging deployment ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name revivatech-production --region eu-west-2
      
      - name: Create deployment backup
        run: |
          kubectl get deployment frontend-en -o yaml > backup-frontend-en.yaml
          kubectl get deployment frontend-pt -o yaml > backup-frontend-pt.yaml
          kubectl get deployment backend -o yaml > backup-backend.yaml
      
      - name: Deploy to production
        run: |
          cd deployment/k8s/production
          
          # Update image tags
          export IMAGE_TAG=${{ github.sha }}
          envsubst < frontend-en-deployment.yaml | kubectl apply -f -
          envsubst < frontend-pt-deployment.yaml | kubectl apply -f -
          envsubst < backend-deployment.yaml | kubectl apply -f -
          
          # Apply other resources
          kubectl apply -f configmap.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f services.yaml
          kubectl apply -f ingress.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend-en -n production --timeout=600s
          kubectl rollout status deployment/frontend-pt -n production --timeout=600s
          kubectl rollout status deployment/backend -n production --timeout=600s
      
      - name: Run health checks
        run: |
          # Wait for pods to be ready
          sleep 30
          
          # Check health endpoints
          curl -f https://revivatech.com/health || exit 1
          curl -f https://api.revivatech.com/health || exit 1
      
      - name: Run production smoke tests
        run: |
          cd website/shared
          npm run test:smoke:production
        env:
          BASE_URL: https://revivatech.com
          API_URL: https://api.revivatech.com
      
      - name: Update monitoring
        run: |
          # Update Grafana dashboards
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"deployment": {"version": "${{ github.sha }}", "timestamp": "${{ github.event.head_commit.timestamp }}"}}' \
            https://grafana.revivatech.com/api/annotations
      
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Production deployment successful!
            Version: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
            Commit: ${{ github.event.head_commit.message }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#alerts'
          text: |
            🚨 Production deployment failed!
            Version: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
            Please check the logs and consider rollback.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production
    
    steps:
      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name revivatech-production --region eu-west-2
      
      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/frontend-en -n production
          kubectl rollout undo deployment/frontend-pt -n production
          kubectl rollout undo deployment/backend -n production
      
      - name: Verify rollback
        run: |
          kubectl rollout status deployment/frontend-en -n production --timeout=300s
          kubectl rollout status deployment/frontend-pt -n production --timeout=300s
          kubectl rollout status deployment/backend -n production --timeout=300s
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              channel: '#alerts',
              text: '⚠️ Production deployment has been automatically rolled back due to deployment failure.',
              color: 'warning'
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}