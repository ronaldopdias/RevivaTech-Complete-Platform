# CLAUDE.md - RevivaTech Project Configuration

This file contains comprehensive configuration and guidance for working with the RevivaTech computer repair shop platform.

## 🚨 CRITICAL: ALWAYS READ FIRST

**BEFORE making ANY changes to the RevivaTech project, you MUST read:**
1. `/opt/webapps/CLAUDE_INFRASTRUCTURE_SETUP.md` - Complete server infrastructure documentation
2. This CLAUDE.md file for project configuration
3. `/opt/webapps/revivatech/Docs/PRD_RevivaTech_Brand_Theme.md` - **CRITICAL: Brand theme & design system**
4. `/opt/webapps/revivatech/Docs/Implementation.md` - Current implementation stage

## ⛔ ABSOLUTE RESTRICTIONS - NEVER VIOLATE

## 🔥 **MANDATORY DEVELOPMENT RULES** (ESTABLISHED JULY 22, 2025)

### **🚨 RULE 1 METHODOLOGY: SYSTEMATIC SERVICE DISCOVERY & DEVELOPMENT**
**MANDATORY 6-STEP PROCESS - EVERY SINGLE TASK MUST FOLLOW THIS COMPLETE METHODOLOGY:**

**This methodology saved 16-24 weeks of development time by discovering 90% of backend services already implemented.**

#### **✅ STEP 1: IDENTIFY - Comprehensive Discovery**
**BEFORE building ANY new service, API, database, or feature:**

**🚀 SERENA-ENHANCED DISCOVERY (PRIMARY METHOD):**
```bash
# Serena semantic code search (PREFERRED - AI-powered analysis)
# Use Serena MCP tools for intelligent code discovery:
# - mcp_serena_semantic_search: Find relevant code by functionality description  
# - mcp_serena_code_analysis: Analyze existing service implementations
# - mcp_serena_dependency_map: Map service relationships and dependencies
# - mcp_serena_file_search: Semantic file discovery across project
```

**🔧 FALLBACK CONTAINER EXPLORATION:**
```bash
# Traditional container exploration (use when Serena unavailable)
docker exec revivatech_new_backend find /app -name "*.js" -type f | grep -E "(route|service|controller|api)" | head -20
docker exec revivatech_new_backend ls -la /app/routes/
docker exec revivatech_new_backend ls -la /app/services/
docker exec revivatech_new_backend grep -r "function\|const.*=" /app/routes/ | head -10
```

**🎯 SERENA-ENHANCED SEARCH TARGETS:**
- **Semantic Code Discovery**: Use natural language to describe functionality
- **Cross-file Analysis**: Understand service relationships and dependencies  
- **API Endpoint Mapping**: Intelligent discovery of related endpoints
- **Database Schema Analysis**: Semantic understanding of data models
- **Authentication Flow Discovery**: Security layer identification
- **Integration Points**: Find connection opportunities with existing services

**Traditional Search Targets (Fallback):**
- `/app/routes/` - API endpoint implementations
- `/app/services/` - Business logic services
- `/app/models/` - Database model definitions
- `/app/controllers/` - Request handlers
- `/app/middleware/` - Authentication, validation
- Database tables and schemas

#### **✅ STEP 2: VERIFY - Test Functionality & Data Integrity**
**Test discovered services BEFORE assuming they don't work:**

**🚀 SERENA-ENHANCED VERIFICATION (PRIMARY METHOD):**
```bash
# Serena autonomous testing and verification (PREFERRED)
# Use Serena MCP tools for intelligent verification:
# - mcp_serena_test_endpoints: Automatically test discovered API endpoints
# - mcp_serena_code_execution: Run and verify service functionality
# - mcp_serena_integration_test: Test service integration points
# - mcp_serena_data_validation: Verify database integrity and data presence
# - mcp_serena_dependency_check: Validate service dependencies and mounting
```

**🔧 FALLBACK MANUAL VERIFICATION:**
```bash
# Traditional verification methods (use when Serena unavailable)
# API endpoint testing
curl -X GET http://localhost:3011/api/[discovered-endpoint]
curl -X POST -H "Content-Type: application/json" -d '{}' http://localhost:3011/api/[endpoint]

# Database verification
docker exec revivatech_new_database psql -U revivatech -d revivatech -c "\dt"  # List tables
docker exec revivatech_new_database psql -U revivatech -d revivatech -c "SELECT COUNT(*) FROM [table_name];"

# Service mounting check
docker exec revivatech_new_backend grep -r "require\|import" /app/server.js | grep -E "(route|service)"
```

**🎯 SERENA-ENHANCED VERIFICATION CAPABILITIES:**
- **Automated API Testing**: Intelligent endpoint discovery and testing
- **Integration Verification**: Test service connections and data flow
- **Error Analysis**: Semantic understanding of error messages and fixes
- **Performance Testing**: Automated load and response time verification
- **Security Validation**: Authentication and authorization testing
- **Data Integrity Checks**: Comprehensive database and schema validation

#### **✅ STEP 3: ANALYZE - Assess Completeness vs Requirements**
**Systematically compare discovered functionality with project requirements:**

**🚀 SERENA-ENHANCED ANALYSIS (PRIMARY METHOD):**
```bash
# Serena intelligent analysis and comparison (PREFERRED)
# Use Serena MCP tools for comprehensive analysis:
# - mcp_serena_gap_analysis: Compare existing vs required functionality
# - mcp_serena_code_quality: Assess implementation quality and completeness
# - mcp_serena_integration_analysis: Evaluate integration complexity and opportunities
# - mcp_serena_requirement_match: Match discovered services to project requirements
# - mcp_serena_architecture_review: Analyze system architecture and compatibility
```

**🎯 SERENA-ENHANCED ANALYSIS CRITERIA:**
- [ ] **Semantic Functionality Gap Analysis**: AI-powered comparison of existing vs needed functionality
- [ ] **Intelligent Data Completeness**: Automated assessment of database population and schema quality
- [ ] **Smart API Coverage**: Semantic matching of endpoints to frontend requirements
- [ ] **Automated Integration Status**: AI analysis of service mounting and connection health
- [ ] **Security Architecture Review**: Comprehensive authentication and authorization analysis
- [ ] **Performance Impact Assessment**: Analyze existing service performance characteristics
- [ ] **Code Quality Evaluation**: Assess maintainability, testing, and documentation quality

**🔧 FALLBACK MANUAL ANALYSIS CRITERIA:**
- [ ] **Functionality Gap Analysis**: What exists vs what's needed?
- [ ] **Data Completeness**: Are database tables populated with real data?
- [ ] **API Coverage**: Do endpoints match frontend needs?
- [ ] **Integration Status**: Are services properly mounted/connected?
- [ ] **Authentication**: Are security layers properly implemented?

**🚀 SERENA-ENHANCED DOCUMENTATION TEMPLATE:**
```markdown
## Serena-Powered Service Discovery Analysis
**Service:** [Service Name]
**Discovery Method:** [Serena Semantic Search/Manual Container Exploration]
**Status:** [Discovered/Partial/Missing]
**Functionality:** [Serena analysis of what exists]
**Semantic Gap Analysis:** [AI-powered comparison with requirements]
**Integration Complexity:** [Serena assessment: Low/Medium/High]
**Code Quality Score:** [Serena evaluation: 1-10]
**Performance Profile:** [Serena analysis of service performance]
**Integration Status:** [Mounted/Unmounted/Needs Configuration]
**AI Recommendation:** [Integrate/Enhance/Create New with confidence score]
**Serena Insights:** [Additional AI-generated insights and suggestions]
```

#### **✅ STEP 4: DECISION - Evidence-Based Choice**
**Choose integration over recreation based on systematic analysis:**

**INTEGRATION CRITERIA (Choose when ≥3 conditions met):**
- [ ] Core functionality exists (≥70% of requirements)
- [ ] Database schema and data are present
- [ ] API endpoints are implemented
- [ ] Service can be mounted/connected
- [ ] Authentication framework exists
- [ ] Integration effort < 25% of recreation time

**CREATION CRITERIA (Create new only when):**
- [ ] No existing functionality found (confirmed after thorough search)
- [ ] Existing implementation is fundamentally incompatible
- [ ] Integration would require more effort than recreation
- [ ] Security/architecture concerns with existing code

#### **✅ STEP 5: TEST - End-to-End Functionality Verification**
**Verify complete integration workflow:**

**🚀 SERENA-ENHANCED TESTING (PRIMARY METHOD):**
```bash
# Serena autonomous end-to-end testing (PREFERRED)
# Use Serena MCP tools for comprehensive integration testing:
# - mcp_serena_integration_test: Automated end-to-end workflow verification
# - mcp_serena_load_test: Performance and scalability testing
# - mcp_serena_security_test: Authentication and authorization verification
# - mcp_serena_error_handling_test: Comprehensive error scenario testing
# - mcp_serena_frontend_integration: Frontend-backend integration verification
# - mcp_serena_database_consistency: Data integrity and consistency testing
```

**🔧 FALLBACK MANUAL TESTING:**
```bash
# Traditional integration testing protocol (use when Serena unavailable)
# 1. Mount/connect service
# 2. Test API endpoints
curl -X GET http://localhost:3011/api/[integrated-service]/health
# 3. Verify database connections
# 4. Test frontend integration
# 5. Validate authentication flow
# 6. Check error handling
```

**🎯 SERENA-ENHANCED TESTING CHECKLIST:**
- [ ] **Automated Service Mounting Verification**: AI-powered validation of service integration
- [ ] **Intelligent API Response Testing**: Semantic validation of endpoint responses
- [ ] **Smart Database Query Verification**: AI analysis of query performance and results
- [ ] **Frontend Integration Testing**: Automated UI-API integration verification
- [ ] **Advanced Authentication Testing**: Comprehensive auth flow and security testing
- [ ] **Predictive Error Handling**: AI-powered error scenario generation and testing
- [ ] **Performance Profiling**: Automated load testing and bottleneck identification
- [ ] **Code Coverage Analysis**: Comprehensive test coverage assessment
- [ ] **Regression Testing**: Automated testing of existing functionality impact

**🔧 FALLBACK MANUAL TESTING CHECKLIST:**
- [ ] Service properly mounted in server.js
- [ ] API endpoints respond correctly
- [ ] Database queries execute successfully
- [ ] Frontend can consume API responses
- [ ] Authentication/authorization works
- [ ] Error handling functions properly
- [ ] Performance meets requirements

#### **✅ STEP 6: DOCUMENT - Comprehensive Progress Tracking**
**Maintain detailed documentation of discovery and integration:**

**MANDATORY Documentation:**
1. **Discovery Report**: What was found, where, and current status
2. **Integration Log**: Steps taken, configurations changed
3. **Testing Results**: All verification outcomes
4. **Performance Metrics**: Before/after comparison
5. **Future Maintenance**: Setup requirements, dependencies

**🚀 SERENA-ENHANCED DOCUMENTATION (PRIMARY METHOD):**
```bash
# Serena intelligent documentation generation (PREFERRED)
# Use Serena MCP tools for comprehensive documentation:
# - mcp_serena_generate_report: AI-generated RULE 1 completion reports
# - mcp_serena_code_documentation: Automatic API and service documentation
# - mcp_serena_architecture_diagram: Generate system architecture insights
# - mcp_serena_integration_guide: Create integration instructions and examples
# - mcp_serena_maintenance_notes: Generate future maintenance recommendations
```

**🚀 SERENA-ENHANCED TEMPLATES:**
```markdown
## SERENA-POWERED RULE 1 METHODOLOGY COMPLETION REPORT
**Task:** [Task Description]
**Date:** [YYYY-MM-DD]
**Serena Version:** [Version]
**Analysis Method:** [Serena AI/Manual Fallback]

### STEP 1: IDENTIFY ✅
**🤖 Serena Discovery Results:**
- **Semantic Search Queries:** [Natural language queries used]
- **Services Found:** [AI-discovered services with confidence scores]
- **Endpoints Discovered:** [Semantic endpoint mapping]
- **Database Tables:** [Schema analysis results]
- **Dependencies Mapped:** [Service relationship graph]
- **Integration Opportunities:** [AI-identified connection points]

### STEP 2: VERIFY ✅
**🤖 Serena Verification Results:**
- **Automated Test Results:** [Pass/Fail counts with details]
- **Working Endpoints:** [Validated API endpoints]
- **Data Verification:** [Database integrity results]
- **Service Status:** [AI-analyzed mounting/connection status]
- **Performance Baseline:** [Automated benchmarks]
- **Security Assessment:** [Authentication/authorization status]

### STEP 3: ANALYZE ✅
**🤖 Serena Analysis Results:**
- **Functionality Coverage:** [AI-calculated percentage with breakdown]
- **Code Quality Score:** [1-10 with detailed analysis]
- **Integration Complexity:** [AI assessment: Low/Medium/High]
- **Performance Profile:** [Automated performance analysis]
- **Security Score:** [AI security assessment]
- **AI Recommendation:** [Integrate/Create with confidence level]

### STEP 4: DECISION ✅
- **Choice Made:** [Integration/Creation]
- **AI Confidence Score:** [Percentage]
- **Justification:** [Serena-enhanced evidence-based reasoning]
- **Risk Assessment:** [AI-generated risk analysis]

### STEP 5: TEST ✅
**🤖 Serena Testing Results:**
- **Integration Status:** [Success/Issues with detailed analysis]
- **Performance Metrics:** [Automated load testing results]
- **Test Coverage:** [Percentage with gap analysis]
- **Error Scenarios:** [AI-generated and tested error cases]
- **Verification Status:** [Complete/Partial with recommendations]

### STEP 6: DOCUMENT ✅
**🤖 Serena Documentation Generated:**
- **Time Saved:** [AI-estimated weeks with methodology comparison]
- **Architecture Insights:** [AI-generated system understanding]
- **Integration Guide:** [Automated step-by-step instructions]
- **Maintenance Recommendations:** [AI-powered future maintenance notes]
- **Next Steps:** [Intelligent action items with priority scores]
- **Knowledge Base Update:** [Serena-generated documentation updates]
```

**🔧 FALLBACK MANUAL TEMPLATE:**
```markdown
## RULE 1 METHODOLOGY COMPLETION REPORT (Manual)
**Task:** [Task Description]
**Date:** [YYYY-MM-DD]

### STEP 1: IDENTIFY ✅
- **Services Found:** [List]
- **Endpoints Discovered:** [List]
- **Database Tables:** [List]

### STEP 2: VERIFY ✅
- **Working Endpoints:** [List]
- **Data Verification:** [Results]
- **Service Status:** [Mounted/Unmounted]

### STEP 3: ANALYZE ✅
- **Functionality Coverage:** [X%]
- **Integration Complexity:** [Low/Medium/High]
- **Recommendation:** [Integrate/Create]

### STEP 4: DECISION ✅
- **Choice Made:** [Integration/Creation]
- **Justification:** [Evidence-based reasoning]

### STEP 5: TEST ✅
- **Integration Status:** [Success/Issues]
- **Performance:** [Metrics]
- **Verification:** [Complete/Partial]

### STEP 6: DOCUMENT ✅
- **Time Saved:** [Estimated weeks]
- **Next Steps:** [Action items]
```

#### **❌ ABSOLUTE VIOLATIONS - NEVER SKIP ANY STEP**
**Failure to follow RULE 1 METHODOLOGY results in:**
- Duplicate work and wasted development time
- Missing existing functionality that could accelerate development
- Incomplete integration that breaks existing systems
- Lost progress and knowledge gaps

**FORBIDDEN SHORTCUTS:**
- ❌ Skipping IDENTIFY step and assuming nothing exists
- ❌ Building new without VERIFY step testing
- ❌ Making decisions without ANALYZE step assessment
- ❌ Implementing without TEST step verification
- ❌ Completing work without DOCUMENT step tracking

**🏆 SUCCESS EXAMPLES:**

**🤖 SERENA-POWERED SUCCESS (Enhanced Methodology):**
*Using Serena semantic search and AI analysis, the complete RULE 1 METHODOLOGY discovered 6 comprehensive backend services (41 database tables, 135 device models, JWT authentication, booking system, customer management) with 95% confidence scores and automated testing verification. What would have taken 16-24 weeks to recreate was integrated in 1.5 hours with comprehensive documentation auto-generated.*

**🔧 MANUAL SUCCESS (Original Methodology):**
*Following the complete 6-step methodology manually discovered the same 6 comprehensive backend services, but required 2 hours for integration and additional time for manual testing and documentation.*

**📊 SERENA ENHANCEMENT BENEFITS:**
- **25% Faster Discovery**: Semantic search vs manual container exploration
- **90% More Accurate Analysis**: AI-powered gap analysis vs manual assessment
- **100% Automated Testing**: Comprehensive test suite vs manual endpoint testing  
- **Instant Documentation**: Auto-generated reports vs manual documentation
- **Higher Confidence**: AI confidence scores vs subjective assessment

### **🚨 RULE 2: CONFIGURATION FILE SAFETY**
**BEFORE deleting/reducing ANY configuration file:**

✅ **MANDATORY STEPS:**
1. **Read the ENTIRE file first** to understand every section's purpose
2. **Check if lines are placeholders** waiting for API keys/tokens/URLs/configuration
3. **Verify if sections support services that exist but need setup**
4. **NEVER reduce comprehensive config files to "simplified" versions**
5. **When in doubt, ASK USER before removing anything**

❌ **FORBIDDEN:**
- Replacing comprehensive configuration files (150+ lines) with minimal versions (40 lines)
- Deleting configuration sections without understanding their purpose
- Simplifying complex configurations without explicit user approval

### **🚨 RULE 3: CONNECTION OVER CREATION**
**When discovering existing services:**

✅ **PREFERRED APPROACH:**
1. **Mount/connect existing services** rather than building new ones
2. **Fix configuration issues** in existing implementations
3. **Update service connections** in server.js, providers, or configuration files
4. **Test integration** between existing frontend and backend components

❌ **AVOID:**
- Building new services when existing ones can be connected/fixed
- Replacing working implementations with new code
- Ignoring comprehensive existing functionality

### **🚫 CRITICAL API CONFIGURATION RULES**
**NEVER make these mistakes that break authentication:**

❌ **NEVER use empty string ("") as API base URL for auth services**
- This routes calls through Next.js proxy which doesn't have auth endpoints
- Breaks Tailscale IP access and external domains
- **ALWAYS use dynamic hostname detection with direct backend URLs**

❌ **NEVER use static API endpoint URLs**
- Static URLs are evaluated once at module load, not per request
- Different hostnames need different backend URLs
- **ALWAYS generate endpoints dynamically in each function call**

✅ **CORRECT API Configuration Pattern:**
```typescript
// ✅ CORRECT - Dynamic URL detection
const getApiBaseUrl = () => {
  if (typeof window === 'undefined') return 'http://localhost:3011';
  
  const hostname = window.location.hostname;
  if (hostname === '100.122.130.67') return 'http://100.122.130.67:3011';
  if (hostname.includes('revivatech.co.uk')) return 'https://api.revivatech.co.uk';
  return 'http://localhost:3011';
};

// ✅ CORRECT - Dynamic endpoint generation
const getAuthEndpoints = () => {
  const baseUrl = getApiBaseUrl();
  return { login: `${baseUrl}/api/auth/login` };
};
```

❌ **NEVER do this (breaks authentication):**
```typescript
// ❌ WRONG - Empty string routes through Next.js
const getApiBaseUrl = () => '';

// ❌ WRONG - Static URLs evaluated once
const API_BASE_URL = getApiBaseUrl();
const AUTH_ENDPOINTS = { login: `${API_BASE_URL}/api/auth/login` };
```

**🚨 REMEMBER: Authentication must work for ALL access methods:**
- Tailscale IP: `100.122.130.67:3010` → `100.122.130.67:3011`
- External: `revivatech.co.uk` → `api.revivatech.co.uk`
- Local: `localhost:3010` → `localhost:3011`

### **🚫 FORBIDDEN DIRECTORIES AND PROJECTS**
**NEVER modify, touch, or reference anything outside `/opt/webapps/revivatech/`:**

❌ **PROHIBITED PATHS:**
- `/opt/webapps/website/` - Website project (Portuguese site)
- `/opt/webapps/CRM/` - CRM project  
- `/opt/webapps/website/backend/` - Website backend
- `/opt/webapps/website/frontend-en/` - Website English frontend
- `/opt/webapps/website/frontend-pt/` - Website Portuguese frontend
- `/opt/webapps/website/shared/` - Website shared components
- `/opt/webapps/website/node_modules/` - Website dependencies
- Any other `/opt/webapps/` subdirectory except `revivatech/`

### **🚫 FORBIDDEN PORTS - NEVER CHANGE**
**These ports belong to OTHER PROJECTS and must NEVER be modified:**

❌ **WEBSITE PROJECT PORTS:**
- **5000** - Website backend (`website_backend_dev`)
- **3000** - Website Portuguese frontend (`website_frontend_pt_dev`)  
- **3308** - Website MySQL database (`website_mysql_dev`)
- **6380** - Website Redis cache (`website_redis_dev`)

❌ **CRM PROJECT PORTS:**
- **5001** - CRM backend (`crm_backend_dev`)
- **3001** - CRM frontend (`crm_frontend_dev`)
- **5433** - CRM PostgreSQL database (`crm_postgres_dev`)
- **6381** - CRM Redis cache (`crm_redis_dev`)

### **✅ ALLOWED REVIVATECH PORTS ONLY**
**These are the ONLY ports you may use for RevivaTech:**

✅ **REVIVATECH PROJECT PORTS:**
- **3010** - RevivaTech English frontend (`revivatech_new_frontend`)
- **3011** - RevivaTech backend API (`revivatech_new_backend`)
- **5435** - RevivaTech PostgreSQL database (`revivatech_new_database`)
- **6383** - RevivaTech Redis cache (`revivatech_new_redis`)
- **8080-8099** - Development/testing ports (if needed)

**Any other ports require explicit user permission.**

### **🚫 FORBIDDEN ACTIONS**
❌ **NEVER DO:**
- Modify any files in `/opt/webapps/website/`
- Change configurations of other projects
- Reference components from other projects  
- Use ports 3000, 3001, 5000, 5001, 3308, 5433, 6380, 6381
- Install dependencies in other project directories
- Modify nginx configs for other projects
- Touch Docker containers not related to RevivaTech
- Edit shared libraries outside RevivaTech scope

### **🔍 VALIDATION CHECKLIST**
**Before making ANY changes, verify:**

✅ **Path Validation:**
- [ ] Working directory is within `/opt/webapps/revivatech/`
- [ ] No references to `/opt/webapps/website/` or `/opt/webapps/CRM/`
- [ ] All imports are from RevivaTech components only

✅ **Port Validation:**
- [ ] Only using ports 3010, 3011, 5435, 6383, or 8080-8099
- [ ] No configuration changes to ports 3000, 3001, 5000, 5001, 3308, 5433, 6380, 6381

✅ **Container Validation:**
- [ ] Only touching `revivatech_*` containers
- [ ] No modifications to `website_*` or `crm_*` containers

**If ANY validation fails, STOP immediately and ask for clarification.**

## 🏗️ INFRASTRUCTURE OVERVIEW

**Container Structure:**
- `revivatech_new_frontend` (port 3010) - English site (revivatech.co.uk)
- `revivatech_new_backend` (port 3011) - API backend
- `website_frontend_pt_dev` (port 3000) - Portuguese site (revivatech.com.br)
- Database: PostgreSQL (port 5435)
- Cache: Redis (port 6383)

**Critical File Locations:**
- **Container CSS**: `/app/styles/globals.css` (in `revivatech_new_frontend` container)
- **Local CSS**: `/opt/webapps/revivatech/frontend/src/app/globals.css`
- **Nginx Config**: `/etc/nginx/sites-enabled/revivatech-dual-domain.conf`
- **Tunnel Config**: `/etc/cloudflared/config.yml`

**Domain Routing:**
- `revivatech.co.uk` → port 3010 (English)
- `revivatech.com.br` → port 3000 (Portuguese)

See `CLAUDE_INFRASTRUCTURE_SETUP.md` for complete infrastructure details.

## 🎯 Project Overview

### **Mission**
Professional computer repair shop website with advanced booking system, customer portal, and admin dashboard.

### **Tech Stack**
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS
- **Backend**: Node.js, Express, PostgreSQL, Redis
- **Architecture**: Configuration-driven, component-based
- **Design**: RevivaTech Brand Theme (Trust-building design) + Nordic Design System
- **Infrastructure**: Docker, nginx, Cloudflare tunnel

### **Key Features**
- Multi-step booking system with device database (2016-2025)
- Real-time customer dashboard with repair tracking
- Admin interface with analytics and queue management
- Multilingual support (EN/PT)
- PWA capabilities with offline support

## 📂 Project Structure

```
/opt/webapps/revivatech/
├── frontend/                    # Next.js frontend application
│   ├── src/
│   │   ├── app/
│   │   │   ├── globals.css     # 🎯 MAIN CSS (imports modular architecture)
│   │   │   ├── layout.tsx      # Root layout
│   │   │   └── page.tsx        # Home page
│   │   ├── components/         # React components
│   │   │   ├── ui/            # UI components (Button, Card, etc.)
│   │   │   ├── sections/      # Page sections (Hero, Services)
│   │   │   └── layout/        # Layout components
│   │   ├── lib/               # Utilities and configurations
│   │   └── styles/            # 🆕 Modular CSS Architecture
│   │       ├── mobile-optimizations.css  # Mobile touch optimization
│   │       └── modules/       # Organized CSS modules
│   │           ├── design-tokens.css     # Colors, typography, spacing
│   │           ├── animations.css        # Keyframes, transitions
│   │           ├── utilities.css         # Utility classes, a11y
│   │           └── responsive.css        # Mobile-first responsive
│   ├── config/                # Configuration files
│   │   ├── app/              # App-wide settings
│   │   ├── components/       # Component configurations
│   │   ├── content/          # Multilingual content (EN/PT)
│   │   └── theme/           # Nordic design tokens
│   ├── package.json
│   └── next.config.ts
├── backend/                    # Node.js API (under development)
├── scripts/                   # Infrastructure scripts
│   └── cloudflare-audit.sh   # Cloudflare management
├── Docs/                     # 📚 Essential documentation
│   ├── Implementation.md     # Current stage & available tasks
│   ├── Configuration_Standards.md # Config patterns
│   └── project_structure.md  # Full structure details
├── CLOUDFLARE_CONFIG.md      # Tunnel configuration
└── CLAUDE.md                 # This file
```

## 🎨 BRAND THEME & DESIGN SYSTEM

### **CRITICAL: When Creating ANY New Pages or Components**

**🚨 ALWAYS reference `/Docs/PRD_RevivaTech_Brand_Theme.md` BEFORE creating any new pages or components.**

This document contains:
- **Complete color psychology** and trust-building principles
- **Brand color palette** with exact hex codes and usage guidelines
- **Component specifications** for trust-building elements
- **Typography guidelines** and design tokens
- **Trust signal components** and implementation patterns

### **Primary Brand Colors (MUST USE)**
```scss
// Trust Blue Palette (Primary - builds customer confidence)
--trust-500: #ADD8E6  // Main brand color for primary CTAs
--trust-700: #4A9FCC  // Text and accents
--trust-900: #1A5266  // Dark text and headers

// Professional Teal Palette (Secondary - expertise/innovation)
--professional-500: #008080  // Secondary CTAs and process steps
--professional-700: #0F766E  // Professional accents
--professional-900: #134E4A  // Supporting elements

// Neutral Reliability Grey (Foundation)
--neutral-700: #36454F  // Body text and reliable elements
--neutral-600: #4B5563  // Secondary text
--neutral-300: #D1D5DB  // Borders and subtle elements
```

### **Trust-Building Design Principles**
1. **Immediate Trust Signals**: Always include trust elements above the fold
2. **Transparent Pricing**: Show clear, honest pricing without hidden fees
3. **Human Connection**: Use authentic customer photos and technician profiles
4. **Process Transparency**: Clearly explain repair process and timelines
5. **Risk Reversal**: Prominent guarantees, warranties, and "no fix, no fee" badges

### **Required Components for New Pages**
- **TrustSignal**: Customer metrics, certifications, satisfaction rates
- **TestimonialCard**: Authentic customer reviews with photos
- **PricingDisplay**: Transparent pricing with trust elements
- **ProcessStep**: Clear repair process explanation
- **CertificationBadge**: Professional credentials and verifications

### **Color Usage Guidelines**
- **Primary CTAs**: Use Trust Blue (#ADD8E6) for "Book Repair", "Get Quote"
- **Secondary Actions**: Use Professional Teal (#008080) for "Learn More", process steps
- **Body Text**: Use Neutral Grey (#36454F) for readability and trust
- **Trust Elements**: Combine Trust Blue and Professional Teal for credibility signals

### **Page Creation Checklist**
- [ ] Referenced PRD_RevivaTech_Brand_Theme.md for design guidance
- [ ] Used correct brand color palette (Trust Blue, Professional Teal, Neutral Grey)
- [ ] Included at least 2-3 trust-building elements above the fold
- [ ] Applied transparent pricing principles if applicable
- [ ] Used authentic imagery and avoided generic stock photos
- [ ] Implemented proper typography hierarchy (SF Pro Display/Text)
- [ ] Ensured WCAG AA accessibility compliance
- [ ] Added appropriate trust signals and certifications

**❌ NEVER use colors outside the brand palette without explicit approval**
**❌ NEVER create pages without trust-building elements**
**❌ NEVER use generic stock photography instead of authentic images**

## 🔧 DEVELOPMENT COMMANDS

### **Container Management**
```bash
# Check all RevivaTech containers
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep revivatech

# Restart English frontend (port 3010)
docker restart revivatech_new_frontend

# Restart backend API (port 3011)  
docker restart revivatech_new_backend

# View frontend logs (hot reload)
docker logs revivatech_new_frontend --tail 20

# Check container health
curl http://localhost:3010/health  # English frontend
curl http://localhost:3011/health  # Backend API
```

### **🚨 MANDATORY: API CHANGES VALIDATION PROTOCOL**

**BEFORE making ANY API configuration changes:**

1. **🔍 VALIDATE API Configuration Changes:**
   ```bash
   # Check current API endpoints are working
   curl -I http://100.122.130.67:3011/api/auth/health  # Tailscale backend
   curl -I http://localhost:3011/api/auth/health       # Local backend
   ```

2. **⚠️ API CHANGE SAFETY CHECKLIST:**
   - [ ] Are you using dynamic URL detection based on hostname?
   - [ ] Are endpoint URLs generated per-request, not statically?
   - [ ] Does Tailscale IP (100.122.130.67) route to direct backend?
   - [ ] Does external domain route to API subdomain?
   - [ ] Are you avoiding empty string ("") as base URL?

3. **🧪 TEST ALL ACCESS METHODS after API changes:**
   ```bash
   # Test Tailscale access (must work)
   curl -X POST -H "Content-Type: application/json" \
        -d '{"email":"admin@revivatech.co.uk","password":"admin123"}' \
        http://100.122.130.67:3011/api/auth/login
   
   # Test localhost access  
   curl -X POST -H "Content-Type: application/json" \
        -d '{"email":"admin@revivatech.co.uk","password":"admin123"}' \
        http://localhost:3011/api/auth/login
   ```

4. **❌ STOP IMMEDIATELY if any test fails - DO NOT PROCEED**

### **🚨 MANDATORY: CODE CHANGE PROTOCOL**

**CRITICAL REQUIREMENT: After ANY code change, you MUST:**

```bash
# 1. ALWAYS restart the affected container immediately after code changes
# Frontend changes (React, TypeScript, CSS, configs):
docker restart revivatech_new_frontend

# Backend changes (API, server, database):
docker restart revivatech_new_backend

# 2. ALWAYS clear container cache to ensure changes are reflected
# Clear frontend build cache:
docker exec revivatech_new_frontend rm -rf /app/.next /app/node_modules/.cache

# Clear backend cache (if applicable):
docker exec revivatech_new_backend rm -rf /app/node_modules/.cache

# 3. ALWAYS verify the change is live in production
# Test frontend:
curl -I http://localhost:3010

# Test backend:
curl -I http://localhost:3011/health

# 4. ALWAYS check logs for any errors after restart
docker logs revivatech_new_frontend --tail 10
docker logs revivatech_new_backend --tail 10
```

**WHY THIS IS CRITICAL:**
- ✅ Ensures changes are immediately reflected in the live environment
- ✅ Prevents stale cache issues that mask code changes
- ✅ Maintains production reliability and prevents deployment issues
- ✅ Allows immediate testing and validation of changes

**WHEN TO APPLY:**
- 🔄 **ANY** React component changes
- 🔄 **ANY** TypeScript/JavaScript changes
- 🔄 **ANY** CSS/styling changes
- 🔄 **ANY** configuration file changes
- 🔄 **ANY** API route changes
- 🔄 **ANY** package.json dependency changes

**❌ NEVER skip this step - it will cause inconsistencies between your changes and the live environment!**

### **📝 MANDATORY: DOCUMENTATION UPDATE PROTOCOL**

**CRITICAL REQUIREMENT: After completing ANY phase, todo, step, or fix, you MUST:**

```bash
# 1. ALWAYS update progress in relevant documentation files
# Update Implementation.md with current status:
Edit /opt/webapps/revivatech/Docs/Implementation.md

# Update specific PRDs with progress:
Edit /opt/webapps/revivatech/Docs/PRD_*.md

# Update project documentation:
Edit /opt/webapps/revivatech/CLAUDE.md  # If infrastructure changes
Edit /opt/webapps/revivatech/README.md  # If major features added

# 2. ALWAYS create completion summaries for significant work
# Create summary files for major phases:
Write /opt/webapps/revivatech/PHASE_[X]_COMPLETION_REPORT.md

# Create fix summaries for important bug fixes:
Write /opt/webapps/revivatech/[FEATURE]_FIX_SUMMARY.md

# 3. ALWAYS update status tracking files
# Update current phase status:
Edit /opt/webapps/revivatech/Docs/project_structure.md
Edit /opt/webapps/revivatech/Docs/Bug_tracking.md  # If fixing bugs
```

**DOCUMENTATION UPDATE REQUIREMENTS:**

1. **Phase Completion:**
   - ✅ Update `/Docs/Implementation.md` with new current phase
   - ✅ Mark completed features as ✅ COMPLETED
   - ✅ Update percentage completion status
   - ✅ Document any blockers or dependencies for next phase
   - ✅ Create `PHASE_[X]_COMPLETION_REPORT.md` with detailed summary

2. **Todo/Task Completion:**
   - ✅ Update relevant PRD with task status: ✅ COMPLETED
   - ✅ Document implementation details and decisions made
   - ✅ Note any deviations from original plan
   - ✅ Update next available tasks list

3. **Bug Fix Completion:**
   - ✅ Update `/Docs/Bug_tracking.md` with fix status
   - ✅ Document root cause and solution applied
   - ✅ Create `[ISSUE]_FIX_SUMMARY.md` for significant fixes
   - ✅ Mark issue as 🟢 RESOLVED with date

4. **Feature Implementation:**
   - ✅ Update feature-specific PRD with implementation status
   - ✅ Document API endpoints, components, or configs created
   - ✅ Update `/Docs/project_structure.md` if new directories added
   - ✅ Create usage examples and configuration notes

**DOCUMENTATION TEMPLATES:**

```markdown
## Phase Completion Template
### Phase [X]: [Name] - ✅ COMPLETED
**Completion Date:** [YYYY-MM-DD]
**Duration:** [X days/weeks]
**Status:** 100% Complete

#### ✅ Completed Items:
- [Feature/task 1] - Fully implemented and tested
- [Feature/task 2] - Fully implemented and tested

#### 📝 Implementation Notes:
- Key decisions made and rationale
- Any architectural changes
- Performance improvements achieved

#### 🚀 Next Phase Ready:
- [Next phase name] is ready to begin
- Dependencies satisfied: [list]
```

```markdown
## Bug Fix Template
### 🐛 [Issue Name] - 🟢 RESOLVED
**Fix Date:** [YYYY-MM-DD]
**Severity:** [High/Medium/Low]
**Root Cause:** [Brief description]
**Solution:** [What was implemented]
**Files Changed:** [List of modified files]
**Testing:** [How the fix was verified]
```

**WHY THIS IS CRITICAL:**
- 📊 Maintains accurate project status and progress tracking
- 🔍 Provides clear audit trail of all work completed
- 🚀 Enables seamless handoffs and future development
- 📚 Creates comprehensive knowledge base for the project
- ⚡ Prevents lost progress and duplicate work

**WHEN TO APPLY:**
- 🎯 **ANY** phase completion (Phase 1, 2, 3, etc.)
- 📋 **ANY** todo or task marked as completed
- 🐛 **ANY** bug fix or issue resolution
- ✨ **ANY** new feature implementation
- 🔧 **ANY** significant infrastructure changes
- 📱 **ANY** component library additions

**❌ NEVER mark tasks complete without updating documentation!**
**❌ NEVER move to next phase without documenting current phase completion!**

### **CSS/Styling Changes - Modular Architecture**
```bash
# 🆕 MODULAR CSS ARCHITECTURE (No more token limit issues!)
# Edit specific CSS modules instead of massive globals.css file

# Edit color palette and design tokens
Read /opt/webapps/revivatech/frontend/src/styles/modules/design-tokens.css

# Edit animations and micro-interactions  
Read /opt/webapps/revivatech/frontend/src/styles/modules/animations.css

# Edit utility classes and accessibility
Read /opt/webapps/revivatech/frontend/src/styles/modules/utilities.css

# Edit responsive design and mobile optimization
Read /opt/webapps/revivatech/frontend/src/styles/modules/responsive.css

# Edit main globals.css (imports modules + base styles)
Read /opt/webapps/revivatech/frontend/src/app/globals.css

# Trigger hot reload for CSS changes
docker exec revivatech_new_frontend touch /app/src/app/globals.css

# Verify compilation
docker logs revivatech_new_frontend --tail 5
```

### **Local Development**
```bash
# Frontend development (when not using containers)
cd /opt/webapps/revivatech/frontend
npm run dev                        # Start dev server (port 3003/3004)
npm run build                      # Build for production
npm run lint                       # Run linting

# Check TypeScript
npx tsc --noEmit                   # Type checking
```

### **Infrastructure Management**
```bash
# Nginx configuration
nginx -t                           # Test config
nginx -s reload                    # Reload config

# Cloudflare tunnel management
systemctl restart cloudflared      # Restart tunnel
systemctl status cloudflared       # Check status
cloudflared tunnel --config /etc/cloudflared/config.yml ingress validate

# Cloudflare audit (use provided API token)
cd /opt/webapps/revivatech/scripts
CLOUDFLARE_API_TOKEN="dQ10MfJmQL0mChrVOknXbcNSn2OACBfTyFNdBqrQ" ./cloudflare-audit.sh

# External access testing (bypass local DNS)
curl --resolve "revivatech.co.uk:443:104.21.64.1" https://revivatech.co.uk
curl --resolve "revivatech.com.br:443:104.21.64.1" https://revivatech.com.br

# Port diagnostics
ss -tlnp | grep :3010             # Check port 3010
ss -tlnp | grep :3000             # Check port 3000
```

## 🎨 Configuration-Driven Development

### **The Golden Rule: Never Hardcode**
```typescript
// ❌ NEVER DO THIS
const Button = () => (
  <button className="bg-blue-500 text-white">
    Click me
  </button>
);

// ✅ ALWAYS DO THIS
const Button = ({ variant, children, className }) => {
  const variants = {
    primary: "bg-primary text-primary-foreground hover:bg-primary/90",
    secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80"
  };
  
  return (
    <button className={cn(variants[variant], className)}>
      {children}
    </button>
  );
};
```

### **Nordic Design System**
```typescript
// Design tokens from config/theme/nordic.theme.ts
const theme = {
  colors: {
    primary: '#007AFF',        // Apple Blue
    neutral: '#1D1D1F',        // Deep charcoal
    background: '#FFFFFF',     // Pure white
    surface: '#F9FAFB',        // Light gray
  },
  typography: {
    heading: 'SF Pro Display, Inter, sans-serif',
    body: 'SF Pro Text, Inter, sans-serif',
  },
  spacing: {
    base: 8,
    scale: { xs: 8, sm: 16, md: 24, lg: 32, xl: 48 }
  }
};
```

### **Component Configuration Pattern**
```typescript
// 1. Define component variants
const buttonVariants = cva(
  "inline-flex items-center justify-center font-medium transition-colors",
  {
    variants: {
      variant: {
        primary: "bg-primary text-primary-foreground hover:bg-primary/90",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        sm: "h-8 px-3 text-sm",
        md: "h-9 px-4 py-2",
        lg: "h-10 px-6 text-lg",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "md",
    },
  }
);

// 2. Use in components
export const Button = ({ variant, size, className, ...props }) => {
  return (
    <button 
      className={cn(buttonVariants({ variant, size }), className)}
      {...props}
    />
  );
};
```

## 🚨 CRITICAL DEVELOPMENT RULES

### **NEVER DO**
- ❌ **CRITICAL VIOLATION**: Skip RULE 1 METHODOLOGY - NEVER start ANY task without completing all 6 steps
- ❌ **CRITICAL VIOLATION**: Build new services without IDENTIFY step discovering existing implementations
- ❌ **CRITICAL VIOLATION**: Complete tasks without DOCUMENT step and RULE 1 Completion Report
- ❌ Skip reading Implementation.md before starting any task
- ❌ Hardcode values that should be in configuration
- ❌ Create components without proper TypeScript types
- ❌ Use inline styles instead of Tailwind classes
- ❌ **CRITICAL**: Modify `/opt/webapps/website/` or `/opt/webapps/CRM/` directories
- ❌ **CRITICAL**: Use ports 3000, 3001, 5000, 5001, 3308, 5433, 6380, 6381
- ❌ Work on external projects outside `/opt/webapps/revivatech/`
- ❌ Reference components from other projects or shared libraries
- ❌ Touch Docker containers: `website_*`, `crm_*`
- ❌ **CRITICAL**: Complete tasks without updating documentation and PRDs
- ❌ **AUTHENTICATION BREAKER**: Use empty string ("") as API base URL - breaks Tailscale login
- ❌ **AUTHENTICATION BREAKER**: Use static API endpoint URLs - breaks hostname detection
- ❌ **AUTHENTICATION BREAKER**: Route auth calls through Next.js proxy - no auth routes exist
- ❌ **AUTHENTICATION BREAKER**: Make API changes without testing all access methods first

### **ALWAYS DO**
- ✅ **FIRST PRIORITY: Execute RULE 1 METHODOLOGY** - Complete all 6 steps for ANY development task (IDENTIFY, VERIFY, ANALYZE, DECISION, TEST, DOCUMENT)
- ✅ Read `/Docs/Implementation.md` for current stage and available tasks
- ✅ Follow configuration-driven development patterns
- ✅ Use TypeScript strict mode
- ✅ Reference design tokens from theme configuration
- ✅ Test components with different variants
- ✅ Follow the Nordic design system
- ✅ Work only within the RevivaTech project boundaries
- ✅ Use the container infrastructure properly
- ✅ **MANDATORY: Restart containers and clear cache after ANY code change**
- ✅ **MANDATORY: Update documentation and PRDs after completing ANY work**
- ✅ **MANDATORY: Create RULE 1 METHODOLOGY Completion Report for all tasks**
- ✅ **AUTHENTICATION PROTECTION**: Use dynamic URL detection with hostname-based routing
- ✅ **AUTHENTICATION PROTECTION**: Generate API endpoints per-request, never statically  
- ✅ **AUTHENTICATION PROTECTION**: Test all access methods before and after API changes
- ✅ **AUTHENTICATION PROTECTION**: Route auth calls directly to backend, never through Next.js

## 📋 TASK EXECUTION PROTOCOL

### **Before Starting Any Task**
1. **Read** `/opt/webapps/CLAUDE_INFRASTRUCTURE_SETUP.md` - complete server setup
2. **Read** `/Docs/Implementation.md` - current stage and available tasks
3. **Check** infrastructure health: `curl http://localhost:3010/health`
4. **Verify** container status: `docker ps | grep revivatech`
5. **Review** related documentation in `/Docs/`
6. **🚨 MANDATORY: Execute RULE 1 METHODOLOGY** - Complete all 6 steps (IDENTIFY, VERIFY, ANALYZE, DECISION, TEST, DOCUMENT)
7. **Create** todo list for complex tasks with RULE 1 steps tracked

### **Infrastructure Health Check Protocol**
```bash
# Complete infrastructure status
echo "=== Container Status ===" && docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep revivatech
echo "=== Service Response ===" && curl -I http://localhost:3010 | head -1 && curl -I http://localhost:3000 | head -1
echo "=== Tunnel Status ===" && systemctl status cloudflared --no-pager
echo "=== External Access ===" && curl -I --resolve "revivatech.co.uk:443:104.21.64.1" https://revivatech.co.uk | head -1
```

### **Development Process**
1. **Configuration First**: Create/update config files before coding
2. **Component Patterns**: Follow established component patterns
3. **Type Safety**: Use TypeScript for all new code
4. **Design System**: Use Nordic design tokens for all styling
5. **Testing**: Test components with different variants
6. **Container Awareness**: Remember changes go to running containers

### **Completion Criteria**
Mark tasks complete ONLY when:
- ✅ **RULE 1 METHODOLOGY completed** - All 6 steps (IDENTIFY, VERIFY, ANALYZE, DECISION, TEST, DOCUMENT) executed and tracked
- ✅ Code follows TypeScript strict mode
- ✅ Components use proper variant patterns
- ✅ No hardcoded values remain
- ✅ All styles use design tokens
- ✅ **Container restarted and cache cleared after code changes**
- ✅ **Changes verified live at http://localhost:3010**
- ✅ **Container logs checked for errors**
- ✅ Hot reload working properly
- ✅ **MANDATORY: Relevant documentation and PRDs updated with progress**
- ✅ **MANDATORY: RULE 1 METHODOLOGY Completion Report created**
- ✅ **MANDATORY: Next available tasks updated in Implementation.md**

## 📚 DOCUMENTATION HIERARCHY

### **PRIORITY 1: MUST READ FIRST**
1. **`/opt/webapps/CLAUDE_INFRASTRUCTURE_SETUP.md`** - Complete server infrastructure documentation
2. **`/Docs/PRD_RevivaTech_Brand_Theme.md`** - **CRITICAL: Brand theme, colors, and trust-building design**
3. **`/Docs/Implementation.md`** - Current implementation stages and available tasks
4. **`/Docs/Configuration_Standards.md`** - Configuration patterns

### **PRIORITY 2: CORE DOCUMENTATION**
5. **`/Docs/project_structure.md`** - Directory structure and organization
6. **`/Docs/Nordic_Design_System_Implementation.md`** - Design system usage (secondary to Brand Theme)
7. **`/Docs/Bug_tracking.md`** - Known issues and solutions

### **PRIORITY 3: INFRASTRUCTURE & OPERATIONS**
8. **`/opt/webapps/FINAL_SUCCESS_REPORT.md`** - Latest infrastructure changes and status
9. **`/opt/webapps/EXTERNAL_DOMAIN_TESTING_REPORT.md`** - External access testing methodology
10. **`/opt/webapps/revivatech/scripts/cloudflare-audit.sh`** - Infrastructure auditing tool

### **PRIORITY 4: FEATURE-SPECIFIC**
11. **`/Docs/Customer_Dashboard_Implementation.md`** - Customer portal features
12. **`/Docs/Admin_Dashboard_Enhancement.md`** - Admin interface
13. **`/CLOUDFLARE_CONFIG.md`** - Tunnel configuration

## 🔧 Common Issues & Solutions

### **Frontend Container Issues**
```bash
# Container not starting
docker restart revivatech_new_frontend
docker logs revivatech_new_frontend --tail 20

# Missing dependencies
docker exec -it revivatech_new_frontend npm install

# Hot reload not working
docker exec revivatech_new_frontend touch /app/styles/globals.css
```

### **Configuration Changes Not Reflecting**
```bash
# Restart frontend container
docker restart revivatech_new_frontend

# Check logs for errors
docker logs revivatech_new_frontend --tail 20

# Verify container is healthy
curl http://localhost:3010/health
```

### **CSS/Styling Issues - Modular Architecture**
```bash
# 🆕 TOKEN LIMIT SOLUTION: Use modular CSS files
# No more "File content exceeds maximum allowed tokens" errors!

# Read specific modules instead of massive globals.css
Read /opt/webapps/revivatech/frontend/src/styles/modules/design-tokens.css    # Colors, typography, spacing
Read /opt/webapps/revivatech/frontend/src/styles/modules/animations.css      # Keyframes, transitions
Read /opt/webapps/revivatech/frontend/src/styles/modules/utilities.css       # Utility classes
Read /opt/webapps/revivatech/frontend/src/styles/modules/responsive.css      # Mobile optimization

# Trigger recompilation
docker exec revivatech_new_frontend touch /app/src/app/globals.css

# Check compilation logs
docker logs revivatech_new_frontend --tail 10
```

## 🏆 Current Status

### **Infrastructure Status** (As of 2025-07-12)
✅ **Fully Operational**: 
- All external domains accessible via HTTPS (revivatech.co.uk, revivatech.com.br)
- Cloudflare tunnel v8 configuration active with 4 healthy connections
- Mail service successfully removed from tunnel configuration
- SSL/HTTPS working with proper security headers
- Backend API (port 3011), Database (PostgreSQL on port 5435), Redis cache (port 6383)
- Portuguese site (port 3000) and English site (port 3010)

✅ **External Access Restored**: 
- All domains tested and working externally with proper styling
- HTTP/2 + SSL certificates active
- Performance: < 500ms response times
- Security: A+ SSL grade with HSTS enabled

🔄 **In Development**: 
- Configuration system
- Component library
- Customer portal
- Admin dashboard

### **Key Infrastructure Details**
- **Tunnel ID**: `89792b6f-6990-4591-a529-8982596a2eaf`
- **API Credentials**: Available in CLAUDE_INFRASTRUCTURE_SETUP.md
- **External Testing**: Use `--resolve` method to bypass local DNS overrides
- **Monitoring**: Cloudflare audit scripts available in `/scripts/`

### **Quick Health Check**
```bash
# Verify all services
curl http://localhost:3010/health  # English frontend
curl http://localhost:3011/health  # Backend API
curl http://localhost:3000/health  # Portuguese frontend

# Check container status
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep revivatech
```

## 🎭 Component Library

### **Available Components**
```
src/components/
├── ui/                        # Base UI components
│   ├── Button.tsx            # Button with variants
│   ├── Card.tsx              # Card layouts
│   ├── Input.tsx             # Form inputs
│   ├── Select.tsx            # Select dropdowns
│   └── index.ts              # Component exports
├── sections/                 # Page sections
│   ├── HeroSection.tsx       # Hero banners
│   ├── ServicesGrid.tsx      # Service listings
│   └── ProcessSteps.tsx      # Process flows
├── layout/                   # Layout components
│   ├── Header.tsx            # Site header
│   ├── Footer.tsx            # Site footer
│   └── MainLayout.tsx        # Main page layout
└── forms/                   # Form components
    └── BookingForm.tsx      # Repair booking form
```

### **Component Usage Pattern**
```typescript
// Import components from local library
import { Button, Card, Input } from '@/components/ui';
import { HeroSection } from '@/components/sections';
import { MainLayout } from '@/components/layout';

// Use with proper typing
export function HomePage() {
  return (
    <MainLayout>
      <HeroSection 
        title="Professional Repair Services"
        variant="primary"
      />
      <Card>
        <Button variant="primary" size="lg">
          Book Repair
        </Button>
      </Card>
    </MainLayout>
  );
}
```

## 🚀 **CURRENT PROJECT STATUS** (Updated July 22, 2025)

### **🎉 PHASE 3 COMPLETE - MAJOR BREAKTHROUGH ACHIEVED**

**Status:** ✅ **PRODUCTION-READY BACKEND SERVICES OPERATIONAL**  
**Progress:** 65% Complete (up from ~30%)  
**Achievement:** Mock-to-Real API transformation complete in 2 hours (saved 16-24 weeks)

#### **✅ COMPLETED ACHIEVEMENTS:**
- **Real API Services**: 6 comprehensive backend services operational
- **Production Database**: 41 tables, 27 brands, 135 device models populated
- **Service Discovery**: Found 90% of backend already implemented (following new rules)
- **Frontend Integration**: ServiceProvider switched from mock to real APIs
- **Authentication Ready**: JWT system operational
- **Database Scale**: Comprehensive schema with real device data

#### **🔄 CURRENT STAGE: STAGE 3 - REPAIR BOOKING SYSTEM**
**Status:** 25% Complete - Backend APIs ready, frontend integration needed  
**Duration:** 2-3 weeks (reduced from 4-5 weeks due to backend completion)

**Ready for Integration:**
- ✅ Device database API (27 brands, 135 models)
- ✅ Customer management API (registration, profiles, history)
- ✅ Booking system API (appointments, scheduling, tracking)
- ✅ Pricing engine API (dynamic calculations)
- ✅ Authentication API (JWT, role-based access)

### **📋 STAGE 3 IMMEDIATE TASKS:**

#### **🔥 HIGH PRIORITY - Frontend Integration:**
1. **Complete Booking Flow Integration** - Connect frontend booking forms to real APIs
2. **Authentication Implementation** - Implement JWT login/logout flows
3. **Customer Portal Connection** - Connect customer dashboard to real customer APIs
4. **Admin Dashboard Integration** - Connect admin interface to real management APIs

#### **🏆 SUCCESS METRICS TO ACHIEVE:**
- [ ] Real booking submissions to database (not mock)
- [ ] Customer login/registration with JWT
- [ ] Admin authentication and access control
- [ ] End-to-end booking flow with real device selection

### **📈 NEXT SESSION PRIORITIES**

#### **Stage 3 Focus Areas:**
1. **Booking System Frontend**: Multi-step form integration with device database
2. **Authentication Flows**: Customer and admin login implementations  
3. **Real-time Features**: Booking status updates and notifications
4. **Admin Tools**: Repair queue management with real data

#### **Platform Ready For:**
- Real customer bookings and device selection
- Production customer registration and login
- Admin management of real repair queue data
- Dynamic pricing with actual calculations

---

**RevivaTech Platform Status**: 🚀 **STAGE 3 READY - REAL APIS OPERATIONAL**

*Version: 3.0.0 | Production Backend + Development Frontend*
*Backend: Full production APIs (port 3011) | Frontend: Integration needed (port 3010)*
*Database: 41 tables, 27 brands, 135 models | Authentication: JWT ready*
*Last Updated: July 22, 2025 | Next: Stage 3 Frontend Integration*

---

## ⚠️ FINAL REMINDER

**CRITICAL RESTRICTIONS:**
- ❌ **NEVER touch `/opt/webapps/website/` or `/opt/webapps/CRM/`**
- ❌ **NEVER use ports: 3000, 3001, 5000, 5001, 3308, 5433, 6380, 6381**
- ❌ **NEVER create pages without referencing `/Docs/PRD_RevivaTech_Brand_Theme.md`**
- ❌ **NEVER use colors outside the brand palette (Trust Blue, Professional Teal, Neutral Grey)**
- ✅ **ONLY work within `/opt/webapps/revivatech/`**
- ✅ **ONLY use ports: 3010, 3011, 5435, 6383, or 8080-8099**
- ✅ **ALWAYS use brand theme colors and trust-building components**

**This project is self-contained within `/opt/webapps/revivatech/`. Any work outside this directory requires explicit user permission.**

**🎨 DESIGN REMINDER: Every new page MUST follow the RevivaTech Brand Theme guidelines for trust-building design, authentic imagery, and transparent pricing principles.**